import time
# Program to multiply two matrices using nested loops

# 3x25 matrix
X = [[12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12]]
# 3x25 matrix
Y = [[12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12],
    [12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12,7,3,12]]
# result is 3x25
result = [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
         [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
         [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
         [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
         [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
         [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
         [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
         [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
         [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
         [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
         [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
         [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
         [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
         [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
         [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
         [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
         [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
         [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
         [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
         [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
         [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
         [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
         [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
         [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]

st = time.monotonic()
# iterate through rows of X
for i in range(len(X)):
   # iterate through columns of Y
   for j in range(len(Y[0])):
       # iterate through rows of Y
       for k in range(len(Y)):
           result[i][j] += X[i][k] * Y[k][j]
for i in range(1000):
    for r in result:
       print(r)
et = time.monotonic()
print('took: ', et)

